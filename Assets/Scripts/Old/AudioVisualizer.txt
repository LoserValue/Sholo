using UnityEngine;
using UnityEngine.Audio;

public class AudioVisualizer : MonoBehaviour
{
    public float pitchValue;
    public float rmsValue;
    public float dbValue;

    public float MaxVisualScale;
    public float visualModifier;
    public float smoothSpeed;
    public float keepPercentage;
    public bool useMic;
    public string SelectedDevice;
    public AudioMixerGroup MixerGroupMic, MixerGroupMaster;

    private const int SAMPLE_SIZE = 1024;
    private AudioSource m_AudioSource;
    private AudioClip m_AudioClip;
    private AudioLowPassFilter m_LowPassFilter;

    private float[] visualScale;
    private Transform[] listGO;

    private float[] samples;
    private float[] spectrum;
    private float sampleRate;

    private int amnVisual = 17;


    // Start is called before the first frame update
    private void Start()
    {
        m_AudioSource = GetComponent<AudioSource>();
        samples = new float[SAMPLE_SIZE];
        spectrum = new float[SAMPLE_SIZE];
        sampleRate = AudioSettings.outputSampleRate;
        visualScale = new float[amnVisual];
        listGO = GetComponentsInChildren<Transform>();
        m_LowPassFilter = GetComponent<AudioLowPassFilter>();

        if (useMic)
        {
            if (Microphone.devices.Length > 0)
            {
                SelectedDevice = Microphone.devices[0].ToString();

                m_AudioSource.clip = Microphone.Start(SelectedDevice, true, 10, (int)sampleRate);
                m_AudioSource.outputAudioMixerGroup = MixerGroupMic;
                while (!(Microphone.GetPosition(null) > 0)) { }
                     MaxVisualScale = 90.0f;
                     visualModifier = 170.0f;
                     smoothSpeed = 10.0f;
                     keepPercentage = 0.25f;
}
            else
            {
                useMic = false;
                MaxVisualScale = 25.0f;
                visualModifier = 50.0f;
                smoothSpeed = 10.0f;
                keepPercentage = 0.25f;
            }
        }
        if (!useMic)
        {
            m_AudioSource.outputAudioMixerGroup = MixerGroupMaster;
            m_LowPassFilter.enabled = false;
        }
        m_AudioSource.Play();
    }

    // Update is called once per frame
    private void Update()
    {
        AnalyzeAudio();
        UpdateVisual();
    }

    private void UpdateVisual()
    {
        int visualIndex = 0;
        int spectrumIndex = 0;
        int averageSize = (int)((SAMPLE_SIZE * keepPercentage) / amnVisual);

        while (visualIndex < amnVisual)
        {
            int j = 0;
            float sum = 0;
            while (j < averageSize)
            {
                sum += spectrum[spectrumIndex];
                spectrumIndex++;
                j++;
            }
            float scaley = sum / averageSize * visualModifier;
            visualScale[visualIndex] -= Time.deltaTime * smoothSpeed;
            if (visualScale[visualIndex] < scaley)
                visualScale[visualIndex] = scaley;
            if (visualScale[visualIndex] > MaxVisualScale)
                visualScale[visualIndex] = MaxVisualScale;

            listGO[visualIndex].localScale = Vector3.one + Vector3.up * visualScale[visualIndex];
            visualIndex++;
        }
    }

    private void AnalyzeAudio()
    {
        m_AudioSource.GetOutputData(samples, 0);

        int i = 0;
        float sum = 0;
        for (; i < SAMPLE_SIZE; i++)
        {
            sum += samples[i] * samples[i];
        }
        rmsValue = Mathf.Sqrt(sum / SAMPLE_SIZE);

        dbValue = 20 * Mathf.Log10(rmsValue / 0.1f);

        m_AudioSource.GetSpectrumData(spectrum, 0, FFTWindow.BlackmanHarris);

        float maxV = 0;
        var maxN = 0;
        for (i = 0; i < SAMPLE_SIZE; ++i)
        {
            if (!(spectrum[i] > maxV) || !(spectrum[i] > 0.0f))
                continue;
            maxV = spectrum[i];
            maxN = i;
        }

        float freqN = maxN;
        if (maxN > 0 && maxN < SAMPLE_SIZE - 1)
        {
            var dL = spectrum[maxN - 1] / spectrum[maxN];
            var dR = spectrum[maxN + 1] / spectrum[maxN];
            freqN += 0.5f * (dL * dR - dL * dL);
        }
        pitchValue = freqN * (sampleRate / 2) / SAMPLE_SIZE;
    }
}
